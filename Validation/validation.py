from datetime import datetime

def get_input(prompt: str, error_message: str) -> str:
    """
    Получает ввод от пользователя и проверяет, чтобы он не был пустым.

    Аргументы:
        prompt (str): Сообщение для пользователя, которое будет выведено перед запросом ввода.
        error_message (str): Сообщение об ошибке, которое будет выведено, если пользователь не введет значение.

    Возвращает:
        str: Введенное пользователем значение, если оно не пустое.

    Повторяет запрос до тех пор, пока не получит непустое значение.
    """
    while True:
        value = input(prompt).strip()
        if not value:
            print(error_message)
        else:
            return value

def get_valid_date(prompt: str) -> str:
    """
    Проверяет корректность формата даты (YYYY-MM-DD) и запрашивает у пользователя корректную дату.

    Аргументы:
        prompt (str): Сообщение для пользователя, которое будет выведено перед запросом ввода даты.

    Возвращает:
        str: Введенную дату в формате строки, если она корректна.

    Повторяет запрос, пока пользователь не введет дату в формате "YYYY-MM-DD".
    """
    while True:
        date_str = get_input(prompt, "Ошибка: Срок выполнения не может быть пустым")
        try:
            datetime.strptime(date_str, "%Y-%m-%d")
            return date_str
        except ValueError:
            print("Ошибка: Неверный формат даты. Укажите дату в формате YYYY-MM-DD")

def get_valid_priority(prompt: str) -> str:
    """
    Проверяет, что приоритет задачи указан корректно. Принимает только значения 'низкий', 'средний' или 'высокий'.

    Аргументы:
        prompt (str): Сообщение для пользователя, которое будет выведено перед запросом ввода приоритета.

    Возвращает:
        str: Введенный приоритет в нижнем регистре, если он корректен.

    Повторяет запрос, пока пользователь не введет допустимое значение приоритета.
    """
    valid_priorities = {"низкий", "средний", "высокий"}
    while True:
        priority = get_input(prompt, "Ошибка: Приоритет не может быть пустым")
        if priority.lower() in valid_priorities:
            return priority.lower()
        else:
            print("Ошибка: Приоритет должен быть 'низкий', 'средний' или 'высокий'")